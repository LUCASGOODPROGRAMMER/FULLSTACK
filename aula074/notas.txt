// ============================================================================
// üß† FUN√á√ÉO CONSTRUTORA, INST√ÇNCIAS E PROT√ìTIPOS EM JAVASCRIPT
// ============================================================================

/*
Uma fun√ß√£o construtora √© usada como um "molde" para criar v√°rios objetos
(inst√¢ncias) de forma r√°pida e padronizada. Ela serve basicamente como uma classe
em outras linguagens, e √© usada junto com a palavra-chave "new".

Exemplo b√°sico:
--------------------------------------------------
function Pessoa(name, surname) {
    this.nome = name
    this.sobrenome = surname
}

const person1 = new Pessoa("Lucas", "Hubner")
const person2 = new Pessoa("Keynner", "Savi")
--------------------------------------------------

Quando usamos "new Pessoa()", o motor do JavaScript faz internamente:
1. Cria um novo objeto vazio: {}
2. Liga o "this" da fun√ß√£o ao novo objeto
3. Define o prot√≥tipo do novo objeto como Pessoa.prototype
4. Retorna o objeto automaticamente
*/

/*
===============================================================================
üì¶ INST√ÇNCIAS E PROPRIEDADES INDIVIDUAIS
===============================================================================
Cada vez que usamos "new Pessoa()", uma nova inst√¢ncia √© criada.
Cada inst√¢ncia tem suas pr√≥prias propriedades (nome e sobrenome),
que s√£o √∫nicas para aquele objeto espec√≠fico.
*/

/*
===============================================================================
‚öôÔ∏è PROT√ìTIPO (prototype) E CADEIA DE PROT√ìTIPOS
===============================================================================
O JavaScript √© baseado em prot√≥tipos. Isso significa que cada fun√ß√£o construtora
tem uma propriedade chamada "prototype", que √© usada como modelo (ou molde)
para todas as inst√¢ncias criadas a partir dela.

Quando criamos uma inst√¢ncia:
--------------------------------------------------
const person1 = new Pessoa("Lucas", "Hubner")
--------------------------------------------------
O motor do JavaScript faz esta liga√ß√£o:
--------------------------------------------------
person1.__proto__ === Pessoa.prototype // true
--------------------------------------------------

Ou seja:
person1 (inst√¢ncia) ‚Üí Pessoa.prototype ‚Üí Object.prototype ‚Üí null
Essa √© a chamada "cadeia de prot√≥tipos" (prototype chain).
*/

/*
===============================================================================
üß± ADICIONANDO M√âTODOS AO PROT√ìTIPO
===============================================================================
Em vez de criar m√©todos dentro da fun√ß√£o construtora (o que recriaria o m√©todo
toda vez que uma nova inst√¢ncia √© criada), √© mais eficiente adicionar os m√©todos
ao prototype da fun√ß√£o construtora.

Exemplo:
--------------------------------------------------
Pessoa.prototype.nomeCompleto = function() {
    return `Prazer, me chamo ${this.nome} ${this.sobrenome}`
}
--------------------------------------------------

Assim, todas as inst√¢ncias de Pessoa podem usar esse m√©todo sem duplica√ß√£o.
Isso economiza mem√≥ria e torna o c√≥digo mais otimizado.

O motor do JS, ao buscar um m√©todo, faz o seguinte:
1. Procura dentro do pr√≥prio objeto (ex: person1.nomeCompleto)
2. Se n√£o encontrar, procura no prot√≥tipo (Pessoa.prototype)
3. Se ainda n√£o encontrar, sobe at√© Object.prototype
4. E, se n√£o houver mais nada, retorna undefined
*/

/*
===============================================================================
üß© PROTOTYPE VS __proto__
===============================================================================
- Pessoa.prototype ‚Üí pertence √† fun√ß√£o construtora (√© o modelo usado pelas inst√¢ncias)
- person1.__proto__ ‚Üí pertence √† inst√¢ncia e aponta para Pessoa.prototype

Ent√£o:
--------------------------------------------------
Pessoa.prototype === person1.__proto__ // true
--------------------------------------------------

A propriedade "__proto__" √© apenas uma forma de acessar o prot√≥tipo interno de
um objeto. O jeito moderno e recomendado √© usar:
--------------------------------------------------
Object.getPrototypeOf(person1)
--------------------------------------------------
*/

/*
===============================================================================
üìò EXEMPLO COMPLETO
===============================================================================

function Pessoa(name, surname) {
    this.nome = name
    this.sobrenome = surname
}

Pessoa.prototype.nomeCompleto = function() {
    return `Prazer, me chamo ${this.nome} ${this.sobrenome}`
}

Pessoa.prototype.getAge = function(anoNascimento) {
    const anoAtual = new Date().getFullYear()
    return anoAtual - anoNascimento
}

const person1 = new Pessoa("Lucas", "Hubner")
const person2 = new Pessoa("Keynner", "Savi")

console.log(person1.nomeCompleto())
console.log(person1.getAge(2007))
*/

/*
===============================================================================
üéì RESUMO FINAL
===============================================================================
- "function Pessoa() {}" √© uma fun√ß√£o construtora (molde de cria√ß√£o)
- "new Pessoa()" cria uma nova inst√¢ncia (objeto baseado no molde)
- "Pessoa.prototype" √© o modelo compartilhado entre todas as inst√¢ncias
- "person1.__proto__" aponta para "Pessoa.prototype"
- M√©todos no "prototype" s√£o mais eficientes pois s√£o reutilizados
- A busca por propriedades e m√©todos segue a cadeia:
  objeto ‚Üí prototype ‚Üí Object.prototype ‚Üí null
- A sintaxe moderna com "class" faz exatamente a mesma coisa por baixo dos panos
*/

// ============================================================================
