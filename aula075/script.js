// ============================================================================
// üß† MANIPULA√á√ÉO DE PROTOTYPES EM JAVASCRIPT
// ============================================================================

/*
No JavaScript, todo objeto tem uma refer√™ncia interna chamada [[Prototype]],
que normalmente √© acessada pelo atributo __proto__ (ou de forma moderna,
pelos m√©todos Object.getPrototypeOf() e Object.setPrototypeOf()).

O Prototype √© o mecanismo que permite **heran√ßa entre objetos**,
ou seja, um objeto pode herdar propriedades e m√©todos de outro.
Isso √© o que torna o JS uma linguagem baseada em prot√≥tipos.
*/

// ============================================================================
// üß± EXEMPLO 1: ENCADEAMENTO MANUAL DE OBJETOS
// ============================================================================

/*
const objA = { chaveA: "A" };
const objB = { chaveB: "B" };
const objC = { chaveC: "C" };

Object.setPrototypeOf(objB, objA); // objB herda de objA
Object.setPrototypeOf(objC, objB); // objC herda de objB (e indiretamente de objA)

console.log(objC.chaveA); // Sa√≠da: "A" ‚Üí herdado via cadeia de prot√≥tipos

A sequ√™ncia de heran√ßa fica assim:
objC ‚Üí objB ‚Üí objA ‚Üí Object.prototype ‚Üí null
*/

// ============================================================================
// üß± EXEMPLO 2: FUN√á√ÉO CONSTRUTORA + PROTOTYPE
// ============================================================================

/*
Aqui criamos um construtor "Product" e adicionamos m√©todos ao seu prototype.
Assim, todas as inst√¢ncias criadas com "new Product()" compartilham os mesmos
m√©todos sem duplic√°-los na mem√≥ria.
*/

function Product(name, price, batch, validity) {
  this.nome = name;
  this.preco = Number(price);
  this.lote = batch;
  this.validade = new Date(validity);
}

// M√©todo adicionado ao prototype (compartilhado entre todas as inst√¢ncias)
Product.prototype.productInformation = function () {
  console.log(
    `produto: ${this.nome}\npre√ßo: ${this.preco.toFixed(2)}\nlote: ${
      this.lote
    }\nvalidade: ${this.validade.toLocaleDateString()}`
  );
};

// M√©todo para aplicar desconto
Product.prototype.productDiscount = function (desconto) {
  this.preco = this.preco * ((100 - desconto) / 100);
  return this.preco;
};

// M√©todo para aplicar aumento
Product.prototype.productIncrease = function (aumento) {
  this.preco = this.preco * ((100 + aumento) / 100);
  return this.preco;
};

// Criando um produto normalmente com o construtor
const p1 = new Product("shampoo", 56.87, "0000-bde", "2009-04-21");
p1.productDiscount(50);
p1.productInformation();

/*
A estrutura de heran√ßa nesse caso √©:
p1 ‚Üí Product.prototype ‚Üí Object.prototype ‚Üí null
*/

// ============================================================================
// üß± EXEMPLO 3: HERDANDO M√âTODOS USANDO Object.setPrototypeOf
// ============================================================================

/*
Mesmo objetos literais podem "herdar" m√©todos de outros prototypes.
Aqui pegamos um objeto comum (p2) e conectamos ele ao Product.prototype
para que ele ganhe acesso aos m√©todos da fun√ß√£o construtora.
*/

const p2 = {
  nome: "Prato",
  preco: 29.5,
  lote: "0001-bde",
  validade: new Date("2014-04-29"),
};

// Herdando os m√©todos do prototype de Product
Object.setPrototypeOf(p2, Product.prototype);

p2.productIncrease(100);
p2.productInformation();

/*
Agora, p2 tamb√©m tem acesso aos m√©todos:
- productInformation()
- productDiscount()
- productIncrease()

mesmo sem ter sido criado com "new Product()".
Isso mostra a flexibilidade do sistema de prot√≥tipos do JS.
*/

// ============================================================================
// üß± EXEMPLO 4: CRIANDO OBJETOS COM Object.create()
// ============================================================================

/*
Object.create() permite criar um novo objeto j√° ligado a um prototype
espec√≠fico. √â uma forma direta de controlar heran√ßa e definir
propriedades com suas configura√ß√µes (enumerable, writable, configurable).
*/

const p3 = Object.create(Product.prototype, {
  preco: {
    writable: true, // pode ser alterado
    configurable: true, // pode ser redefinido ou removido
    enumerable: true, // aparece em loops como for...in
    value: 422,
  },
  tamanho: {
    writable: true,
    configurable: true,
    enumerable: true,
    value: 41,
  },
});

p3.productIncrease(23); // herdado de Product.prototype
console.log(p3);

/*
O m√©todo productIncrease() funciona, pois p3 herda de Product.prototype.
A cadeia de prot√≥tipos aqui √©:

p3 ‚Üí Product.prototype ‚Üí Object.prototype ‚Üí null
*/

// ============================================================================
// üéì RESUMO FINAL
// ============================================================================

/*
‚úÖ Object.setPrototypeOf(obj, proto)
   ‚Üí Define manualmente o prototype de um objeto.

‚úÖ Object.getPrototypeOf(obj)
   ‚Üí Retorna o prototype de um objeto (forma moderna de acessar __proto__).

‚úÖ Object.create(proto, props)
   ‚Üí Cria um novo objeto j√° ligado a um prototype e com propriedades configur√°veis.

‚úÖ Fun√ß√£o construtora + prototype
   ‚Üí Permite criar m√©todos reutiliz√°veis e compartilhados entre v√°rias inst√¢ncias.

‚úÖ Prototype chain (cadeia de prot√≥tipos)
   ‚Üí √â o mecanismo que o JS usa para procurar propriedades/m√©todos:
     objeto ‚Üí prototype ‚Üí Object.prototype ‚Üí null
*/

// ============================================================================
