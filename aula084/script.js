// ===============================
// CLASSE PAI (BASE)
// ===============================

class Controle {
  constructor(name, connection) {
    // Valida√ß√£o: verifica se o nome √© uma string n√£o vazia
    if (typeof name !== "string" || !name.trim()) {
      throw new Error("O nome deve ser uma string n√£o vazia.");
    }

    // Valida√ß√£o: verifica se a conex√£o √© uma string n√£o vazia
    if (typeof connection !== "string" || !connection.trim()) {
      throw new Error("A conex√£o deve ser uma string n√£o vazia.");
    }

    // Atributos da classe base
    this.name = name.trim();
    this.connection = connection.trim();
  }
}

// ===============================
// CLASSE FILHA
// (HERDA de Controle)
// ===============================

class ControleRemoto extends Controle {
  constructor(name, connection, type, sound) {
    // Valida√ß√£o do tipo do controle (string n√£o vazia)
    if (typeof type !== "string" || !type.trim()) {
      throw new Error("O tipo de controle deve ser uma string n√£o vazia.");
    }

    // Valida√ß√£o do volume inicial (n√∫mero positivo e finito)
    if (typeof sound !== "number" || sound < 0 || !Number.isFinite(sound)) {
      throw new Error("O som deve ser um n√∫mero positivo e v√°lido.");
    }

    // Chama o construtor da classe pai (Controle)
    // Isso inicializa 'name' e 'connection'
    super(name, connection);

    // Novos atributos espec√≠ficos da classe filha
    this.type = type.trim(); // tipo do controle (ex: anal√≥gico)
    this.sound = sound; // volume inicial
  }

  // ===============================
  // M√âTODOS DE INST√ÇNCIA
  // ===============================

  // Aumentar o som do controle
  increaseSound(value) {
    // Valida√ß√£o: valor precisa ser um n√∫mero v√°lido maior que 0
    if (typeof value !== "number" || value <= 0 || !Number.isFinite(value)) {
      throw new Error("O valor deve ser um n√∫mero v√°lido maior que 0.");
    }

    // Math.min() impede que o volume ultrapasse o limite de 100
    this.sound = Math.min(this.sound + value, 100);
  }

  // Diminuir o som do controle
  decreaseSound(value) {
    // Valida√ß√£o: valor precisa ser um n√∫mero v√°lido maior que 0
    if (typeof value !== "number" || value <= 0 || !Number.isFinite(value)) {
      throw new Error("O valor deve ser um n√∫mero v√°lido maior que 0.");
    }

    // Math.max() impede que o volume fique abaixo de 0
    this.sound = Math.max(this.sound - value, 0);
  }

  // ===============================
  // M√âTODO EST√ÅTICO
  // ===============================

  static changeBattery() {
    console.log("Ok, pilha trocada");

    // 'this' dentro de um m√©todo est√°tico aponta para a CLASSE,
    // n√£o para uma inst√¢ncia espec√≠fica
    console.log(this);
  }

  /*
    ‚öôÔ∏è Sobre m√©todos est√°ticos:

    - M√©todos est√°ticos pertencem √† CLASSE, e n√£o √†s inst√¢ncias.
    - S√≥ podem ser chamados diretamente na classe:
        ControleRemoto.changeBattery();

    - N√£o podem acessar atributos ou m√©todos da inst√¢ncia (this.sound, this.type...),
      pois n√£o fazem parte de um objeto espec√≠fico.

    - S√£o √∫teis para a√ß√µes gen√©ricas que pertencem √† classe,
      como criar logs, validar dados, ou realizar a√ß√µes de manuten√ß√£o.
  */
}

// ===============================
// CRIANDO UMA INST√ÇNCIA
// ===============================

const c1 = new ControleRemoto(
  "controle de caixa de som", // name
  "2.4g",                    // connection
  "controle anal√≥gico",       // type
  35                          // sound inicial
);

// ===============================
// USANDO M√âTODOS DE INST√ÇNCIA E EST√ÅTICOS
// ===============================

// Chama o m√©todo de inst√¢ncia (altera o volume do objeto c1)
c1.increaseSound(12);

// Chama o m√©todo est√°tico diretamente na classe (n√£o na inst√¢ncia)
ControleRemoto.changeBattery();

/*
  üß† Resumo:
  - M√©todos de inst√¢ncia: s√≥ funcionam em objetos criados com 'new'
  - M√©todos est√°ticos: s√≥ funcionam na classe diretamente
  - O m√©todo est√°tico N√ÉO tem acesso aos atributos da inst√¢ncia,
    pois eles pertencem a um objeto espec√≠fico (c1, c2, etc.)
*/
